# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

promt_parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
promt_rvalue() {
	lastcmd=$?;
	if [ $lastcmd -ne 0 ]; then 
		echo "[$lastcmd]";
	fi
	exit $lastcmd
}
promt_NoUser=0
promt_usrCut(){
	lastcmd=$?;
	usr="\u@\h"
	usr=${usr@P}
	if [ $promt_NoUser -eq 0 ]; then 
		if [ $lastcmd -ne 0 ]; then 
			lastcmdStr="[$lastcmd]";
			printf  ${usr:${#lastcmdStr}} | sed -e 's/* \(.*\)/(\1)/'
		else
			printf  $usr | sed -e 's/* \(.*\)/(\1)/'
		fi
	fi
	exit $lastcmd
}
promt_NewLine=0;
promt_MakNewLine(){
	if [ $promt_NewLine -ne 0 ]; then 
		printf  '\n$' #| sed -e 's/* \(.*\)/(\1)/'
	else
		printf  '$' #| sed -e 's/* \(.*\)/(\1)/'
	fi
}

pNL()
{
	if [ $promt_NewLine -eq 0 ]; then
		promt_NewLine=1;
	else
		promt_NewLine=0;
	fi
}
pNN()
{
	if [ $promt_NoUser -eq 0 ]; then
		promt_NoUser=1;
	else
		promt_NoUser=0;
	fi
}

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

#if [ "$color_prompt" = yes ]; then

device_name()
{
	tmp="\h";
	echo ${tmp@P};
}
device_name=`device_name`;


char() {
  [ "$1" -lt 256 ] || return 1
  printf "\\$(printf '%03o' "$1")"
}

promt()
{
	echo -n ${PS1@P} | tr -d `char 1``char 2`
}


# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias vi='vim'
alias e='vim'
alias view='vim -R'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
# light()
# {
 #  sudo sh -c 'echo '$1'  > /sys/devices/pci0000:00/0000:00:02.0/drm/card0/card0-eDP-1/intel_backlight/brightness'
# }
mkdircd()
{
	mkdir $1; cd $1
}
BG()
{
	( $@ 1>/dev/null 2>/dev/null & ) 
}
gopen()
{
	( xdg-open "$@" 2>/dev/null 1>/dev/null & ) 
}
run()
{
	$@;
}
h()
{
	 echo ---------- $@: | lolcat;
	$@
}
bashLine()
{
	promt;
	printf "%s\n" "${@}";
	$@
}
sepLine()
{
	s=$(printf "%-`stty size | cut -d ' ' -f 2`s" " ");echo -e "\e[30;48;5;82m${s// / }\e[0m"
}
rmHARD()
{
	rm "$@"
}
alias rm='trash '
alias cp='cp -i '
alias mv='mv -i '

alias gic="git commit"
alias gica="git commit --amend"
alias gis="git status"
alias gig="git log --oneline --graph"
alias gil="git log --max-count=1"
alias gia="git add"
alias giaa="git add ."
alias ms="movingssh"
alias sys="sudo systemctl "
alias syss="sudo systemctl start"
alias syse="sudo systemctl stop"
alias sysp="sudo systemctl status"
giac() { git add $@;git commit; }
giaac() { git add . $@;git commit; }
giaca() { git add $@;git commit --amend; }
giaaca() { git add . $@;git commit --amend; }
gip() { git pull $@;git push $@; }
youtube() {
	youtube-dl $@ -o - | vlc -
}



export PATH=$PATH:~/bin


promt_color_rvalue=91
promt_color_user=32
promt_color_dir=34
promt_color_git=93
promt_color_dolar=39


if [ "$device_name" = "externalArch" ] ;
then
	promt_color_user=33
fi

if [ "$ISBREAKEBLE" = "1" ] ;
then
	promt_color_user=95
fi

if [ "$SSH_CONNECTION" != "" ];
then 
	if [ "$LD_SSHTYPE" = "local" ];
	then 
		promt_color_user=96
	else
		promt_color_rvalue=32
		promt_color_user=91
	fi
else
	if [ "$device_name" = "localhost" ] ;
	then
		pNN
	fi
fi
if [ "$USER" == "root" ];
then 
	promt_color_dolar="91;1"
fi

for i in ~/bin/bashrc/*
do
	  . $i
done 2>/dev/null



PS1='${debian_chroot:+($debian_chroot)}\
\[\033[01;${promt_color_rvalue}m\]$(promt_rvalue)\
\[\033[01;${promt_color_user}m\]$(promt_usrCut)\
\[\033[00m\]:\[\033[01;${promt_color_dir}m\]\w\
\[\033[00m\]\[\033[01;${promt_color_git}m\]$(promt_parse_git_branch)\
\[\033[0m\]\
\[\033[${promt_color_dolar}m\]\
$(promt_MakNewLine)\[\033[21m\]\[\033[0m\] '

unset color_prompt force_color_prompt
