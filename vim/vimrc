" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2019 Dec 17
"
" To use it, copy it to
"	       for Unix:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"	 for MS-Windows:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings, bail
" out.
if v:progname =~? "evim"
  finish
endif

" Get the defaults that most users want.
source $VIMRUNTIME/defaults.vim

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
"  set backup		" keep a backup file (restore to previous version)
  if has('persistent_undo')
"    set undofile	" keep an undo file (undo changes after closing)
  endif
endif

if &t_Co > 2 || has("gui_running")
  " Switch on highlighting the last used search pattern.
  set hlsearch
endif

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
augroup END

" Add optional packages.
"
" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif

se nocompatible
se nu
se autoindent
se mouse=a
se showcmd
se hlsearch
" se textwidth=80
" se nolinebreak

let g:toExec = ""
let g:VimRun = ""
let g:useVimRun = 0



command! -nargs=+ AddExecF  let g:toExec = g:toExec . <q-args>
command! -nargs=+ AddExec  AddExecF promt; echo <q-args>; <args>;
command! -nargs=+ AddBashF  let g:toExec = <q-args>
command! -nargs=* AddBashG  AddBashF bash -i -c <q-args>;
command!  AddBash  execute "AddBashG ".g:toExec
command! -nargs=+ AddLessF  let g:toExec = <q-args>
command! -nargs=* AddLessG  AddLessF bash -i -c <q-args>;
command!  AddLess  execute "AddLessF (".g:toExec."  )2>&1 | less -r"
function! B(in)
	execute "AddExec ".a:in
	call Exec()
endfunction
function! BH(in)
	execute "AddExec ".a:in
	call ExecHere()
endfunction
function! BR(in)
	execute "AddExec ".a:in
	call ExecVimRun()
endfunction
command! -nargs=* B  call B(<q-args>)
command! -nargs=* BH call BH(<q-args>)
command! -nargs=* BR call BR(<q-args>)

function! ExecHere()
	AddBash
	execute "!".g:toExec
	let g:toExec = ""
endfunction

function! Exec()
	if g:useVimRun == 1
		call ExecVimRun()
	else
		call ExecHere()
	endif
endfunction

function! MakeVimRun()
	let pid = trim(system('ps -o ppid= -p $$'))
	echo pid
	let s = system(" terminal -e bash -i -c \"vimRun ~/.vimRun/".pid." ".pid." \" & ")
	let g:VimRun = trim(system('echo $HOME'))."/.vimRun/".pid
	echo g:VimRun
	let g:useVimRun = 1
endfunction
function! MakeVimRunNoWindow()
	let pid = trim(system('ps -o ppid= -p $$'))
	echo pid
	let g:VimRun = trim(system('echo $HOME'))."/.vimRun/".pid
	echo g:VimRun
	let g:useVimRun = 1
endfunction
function! ExecVimRun()
	if g:VimRun == ""
		call ExecHere()
	else
		AddBash
		call writefile([g:toExec], g:VimRun )
		let g:toExec = ""
	endif
endfunction


function! InitVar(name)
	execute "let g:".a:name." = \"NONE\""
	execute "let w:".a:name." = \"NONE\""
	execute "let t:".a:name." = \"NONE\""
	execute "let b:".a:name." = \"NONE\""
endfunction
call InitVar("Compile")
call InitVar("Run")
call InitVar("CompileScript")
call InitVar("RunScript")

function! GetVar(name)
	let v = trim(get(b:,a:name,"NONE"))
	if v != "NONE"
		return v
	endif
	let v = trim(get(w:,a:name,"NONE"))
	if v != "NONE"
		return v
	endif
	let v = trim(get(t:,a:name,"NONE"))
	if v != "NONE"
		return v
	endif
	let v = trim(get(g:,a:name,"NONE"))
	if v != "NONE"
		return v
	endif
	return "EMPTY"
endfunction

function! Syntax()
	let get = GetVar("Syntax")
	if get != "EMPTY"
		  return get
	endif
	let syntax = trim(split(execute("set syntax")." ","=")[1])
	if syntax == "plaintex"
		return "tex"
	endif
	return syntax
endfunction

function! NameAll()
	return expand('%:p')
endfunction
function! NameNoE()
	return expand('%:p:r')
endfunction
function! NameDir()
	return expand('%:p:h')
endfunction
function! CompileArg()
	let arg = GetVar("Compile")
	if arg != "EMPTY"
		return arg
	endif
	let s = Syntax()
	if s == "cpp"
		return "-Wall"
	else
	return ""
endfunction
function! RunArg()
	let arg = GetVar("Run")
	if arg != "EMPTY"
		return arg
	endif
	return ""
endfunction

function! Compile(isVimRun)
	w
	let s = Syntax()
	if s == "cpp"
		execute "AddExec g++ -fdiagnostics-color ".NameAll()." -o ".NameNoE().".out ".CompileArg()
	elseif s == "c"
		execute "AddExec gcc -fdiagnostics-color ".NameAll()." -o ".NameNoE().".out ".CompileArg()
	elseif s == "cmake"
		execute "AddExec cmake  ".NameDir()." ".CompileArg()
		execute "AddExec cmake --build ".NameDir()." ".CompileArg()
	elseif s == "arduino"
		execute "AddExec arduino-cli compile --fqbn arduino:avr:uno ".NameDir()."/ ".RunArg()
	elseif s == "tex"
		execute "AddExec pdflatex ".NameAll()." ".CompileArg()
	elseif s == "ptex"
		execute "AddExec pdfcsplain ".NameAll()." ".CompileArg()
	elseif s == "ltex"
		execute "AddExec luatex ".NameAll()." ".CompileArg()
	elseif s == "asy"
	elseif s == "asy"
		execute "AddExec asy ".NameAll()." ".CompileArg()
	elseif s == "make"
		execute "AddExec make"
	else
		let script = GetVar("CompileScript")
		if script == "EMPTY"
			execute "AddExec echo This sintax ".s." is not suported | lolcat"
		elseif s=="script"
			execute "AddExec ".script
		else
			execute "AddExec ".script." ".NameAll()." ".CompileArg()
		endif
	endif
endfunction
function! Run(isVimRun,input)
	let s = Syntax()
	if s == "cpp"
		execute "AddExec ".NameNoE().".out ".RunArg()." ".a:input
	elseif s == "c"
		execute "AddExec ".NameNoE().".out ".RunArg()." ".a:input
	elseif s == "sh"
		w
		execute "AddExec bash ".NameAll()." ".RunArg()." ".a:input
	elseif s == "python"
		w
		execute "AddExec python3 ".NameAll()." ".RunArg()." ".a:input
	elseif s == "arduino"
		execute "AddExec arduino-cli upload -p /dev/ttyUSB0 --fqbn arduino:avr:uno ".NameDir()."/ ".RunArg()." ".a:input
	elseif s == "cmake"
		execute "AddExec ".NameDir()."/".split(NameDir(),"/")[-1]." ".RunArg()." ".a:input
	elseif s == "tex"
		execute "AddExec gopen ".NameNoE().".pdf ".RunArg()" "
	elseif s == "ptex"
		execute "AddExec gopen ".NameNoE().".pdf ".RunArg()" "
	elseif s == "ltex"
		execute "AddExec gopen ".NameNoE().".pdf ".RunArg()" "
	else
		let script = GetVar("RunScript")
		if script == "EMPTY"
			execute "AddExec echo This sintax ".s." is not suported | lolcat"
		elseif s=="script"
			w
			execute "AddExec ".script
		else
			w
			execute "AddExec ".script." ".NameAll()." ".CompileArg()
		endif
	endif
endfunction
function! RunTests(isVimRun)
	let ls = split(system("ls ".NameNoE()."*.txt ".NameNoE()."*.in 2>/dev/null"),"\n")
	for i in ls
		call Run(a:isVimRun," < ".i)
	endfor
endfunction
function! ClearBin(isVimRun)
	let s = Syntax()
	if s == "cpp"
		execute "AddExec rm ".NameNoE().".out "
	elseif s == "c"
		execute "AddExec rm ".NameNoE().".out "
	elseif s == "tex"
	else
		echo "This sintax \"".s."\" is not suported!"
	endif
endfunction
function! Debug(isVimRun)
	w
	let s = Syntax()
	if s == "cpp"
		call ClearBin(a:isVimRun)
		execute "AddExec g++ -g3 ".NameAll()." -o ".NameNoE().".out ".CompileArg()
		execute "AddExec gdb ".NameNoE().".out ".RunArg()
	elseif s == "c"
		call ClearBin(a:isVimRun)
		execute "AddExec gcc -g3 ".NameAll()." -o ".NameNoE().".out ".CompileArg()
		execute "AddExec gdb ".NameNoE().".out ".RunArg()
	else
		echo "This sintax \"".s."\" is not suported!"
	endif
endfunction
function! CompileRun(isVimRun)
	call ClearBin(a:isVimRun)
	call Compile(a:isVimRun)
	call Run(a:isVimRun,"")
endfunction
function! CompileRunTests(isVimRun)
	call ClearBin(a:isVimRun)
	call Compile(a:isVimRun)
	call RunTests(a:isVimRun)
endfunction


function! BasicFile()
	let extension = Syntax()
	execute "r ~/.basicFile/basicFile." . extension
endfunction

map \c :call Compile(g:useVimRun)<CR>:call Exec()<CR>
map \v :call Compile(g:useVimRun)<CR>:AddLess<CR>:call Exec()<CR>
map \r :call Run(g:useVimRun,"")<CR>:call Exec()<CR>
map \e :call CompileRun(g:useVimRun)<CR>:call Exec()<CR>
map \d :call Debug(g:useVimRun)<CR>:call Exec()<CR>
map \t :call CompileRunTests(g:useVimRun)<CR>:call Exec()<CR>
map \y :call RunTests(g:useVimRun)<CR>:call Exec()<CR>
map \u :call CompileRunTests(g:useVimRun)<CR>:AddLess<CR>:call Exec()<CR>
map \i :call RunTests(g:useVimRun)<CR>:AddLess<CR>:call Exec()<CR>
map \' :call Exec()<CR>

map \[c :call Compile(0)<CR>:call ExecHere()<CR>
map \[v :call Compile(0)<CR>:AddLess<CR>:call ExecHere()<CR>
map \[r :call Run(0,"")<CR>:call ExecHere()<CR>
map \[e :call CompileRun(0)<CR>:call ExecHere()<CR>
map \[d :call Debug(0)<CR>:call ExecHere()<CR>
map \[t :call CompileRunTests(0)<CR>:call ExecHere()<CR>
map \[y :call RunTests(0)<CR>:call ExecHere()<CR>
map \[u :call CompileRunTests(0)<CR>:AddLess<CR>:call ExecHere()<CR>
map \[i :call RunTests(0)<CR>:AddLess<CR>:call ExecHere()<CR>
map \[' :call ExecHere()<CR>

map \]c :call Compile(1)<CR>:call ExecVimRun()<CR>
map \]v :call Compile(1)<CR>:AddLess<CR>:call ExecVimRun()<CR>
map \]r :call Run(1,"")<CR>:call ExecVimRun()<CR>
map \]e :call CompileRun(1)<CR>:call ExecVimRun()<CR>
map \]d :call Debug(1)<CR>:call ExecVimRun()<CR>
map \]t :call CompileRunTests(1)<CR>:call ExecVimRun()<CR>
map \]y :call RunTests(1)<CR>:call ExecVimRun()<CR>
map \]u :call CompileRunTests(1)<CR>:AddLess<CR>:call ExecVimRun()<CR>
map \]i :call RunTests(1)<CR>:AddLess<CR>:call ExecVimRun()<CR>
map \]' :call ExecVimRun()<CR>

map \w :call MakeVimRun()<CR>
map \q :call MakeVimRunNoWindow()<CR>
map \[w :let g:useVimRun = 0<CR>
map \]w :let g:useVimRun = 1<CR>

map \O :let b:Compile = ""<Left>
map \<C-O> :let t:Compile = ""<Left>
map \<C-o> :let v:Compile = ""<Left>
map \o :let g:Compile = ""<Left>
map \P :let b:Run = ""<Left>
map \<C-P> :let t:Run = ""<Left>
map \<C-p> :let v:Run = ""<Left>
map \p :let g:Run = ""<Left>
map \L :let b:Syntax = ""<Left>
map \<C-L> :let t:Syntax = ""<Left>
map \<C-l> :let v:Syntax = ""<Left>
map \l :let g:Syntax = ""<Left>
map \J :let b:CompileScript = ""<Left>
map \<C-J> :let t:CompileScript = ""<Left>
map \<C-j> :let v:CompileScript = ""<Left>
map \j :let g:CompileScript = ""<Left>
map \K :let b:RunScript = ""<Left>
map \<C-K> :let t:RunScript = ""<Left>
map \<C-k> :let v:RunScript = ""<Left>
map \k :let g:RunScript = ""<Left>

map \h :call Help()<CR>

map \f :call BasicFile()<CR><Up>dd

map \s :se spell<CR>:se spelllang=cs<CR>

map \b <HOME>v<END>y:!<c-R>"<BS><CR>
map \B <HOME>v<END>y:!sudo <c-R>"<BS><CR>

imap <silent> <C-Up> <C-o>gk
imap <silent> <C-Down> <C-o>gj
map <silent> <C-Up> gk
map <silent> <C-Down> gj

map <silent> <C-c> "+y
vmap <silent> <C-c> "+y
map <silent> <C-x> "+d
vmap <silent> <C-x> "+d
imap <silent> <C-v> <C-r>+

set timeoutlen=100000000000000000

map ,, A <ESC>I <Esc>lvEdi<BS><Del>\begin{}<Esc>Po\end{}<Esc>PO
map <silent> ,o o\item 
map <silent> ,O o\item 
map <silent> ,i oitemize<Esc>,,\item 
map <silent> ,I Oitemize<Esc>,,\item 
map <silent> ,e Oenumerate<Esc>,,\item 
map <silent> ,E Oenumerate<Esc>,,\item 
map <silent> ,r Ienumerate <Esc>,,\item 
map <silent> ,m oeqnarray* <Esc>,,
map <silent> ,M Oeqnarray* <Esc>,,
map <silent> ,n o$$<ESC>o$$<ESC>O
map <silent> ,N O$$<ESC>o$$<ESC>O
"map ,, yyI\begin{<Esc>A}<Esc>pI\end{<Esc>A}<Esc>O

